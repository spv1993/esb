<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0"
           xmlns:jaxws="http://cxf.apache.org/blueprint/jaxws"
           xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
           xmlns:cxf="http://cxf.apache.org/blueprint/core"
           xmlns:camel="http://camel.apache.org/schema/blueprint"
           xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
           xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0"
           xmlns:functions="http://camel.apache.org/xml/function/"
           xsi:schemaLocation="
               http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
               http://cxf.apache.org/blueprint/jaxws http://cxf.apache.org/schemas/blueprint/jaxws.xsd
               http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd">

    <cm:property-placeholder id="manager-rs-config" persistent-id="edu.servicemix.esb.services.manager" update-strategy="reload">
        <cm:default-properties>
            <cm:property name="rs.address" value="/rest/manager"/>
            <cm:property name="service.address" value="http://localhost:8181/cxf/rest/schedule"/>
            <cm:property name="service.soTimeout" value="10"/>
            <cm:property name="service.http.connection.stalecheck" value="true"/>
            <cm:property name="service.http.socket.timeout" value="0"/>
            <cm:property name="logger.name" value="edu.servicemix.esb.services.manager"/>
            <cm:property name="seda.api.size" value="100"/>
            <cm:property name="seda.api.concurrentConsumers" value="100"/>
            <cm:property name="seda.api.timeout" value="600000"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <bean id="managerScheduleService" class="edu.servicemix.esb.services.manager.ManagerScheduleService"/>
    <bean id="eventHashGeneratorService" class="edu.servicemix.esb.services.manager.EventHashGeneratorService"/>

    <bean id="managerRestService" class="edu.servicemix.esb.services.manager.rest.ManagerRestService">
        <property name="producerTemplate" ref="managerProducerTemplate" />
    </bean>

    <jaxrs:server id="manager-rs" address="${rs.address}">
        <jaxrs:serviceBeans>
            <ref component-id="managerRestService"/>
        </jaxrs:serviceBeans>
    </jaxrs:server>

    <camelContext id="manager-rs-context" xmlns="http://camel.apache.org/schema/blueprint">
        <propertyPlaceholder id="manager-rs-properties" location="blueprint:manager-rs-config" prefixToken="[[" suffixToken="]]"/>

        <template id="managerProducerTemplate"/>

        <endpoint id="sedaManagerAPI" uri="seda:sedaManagerAPI?size=[[seda.api.size]]&amp;concurrentConsumers=[[seda.api.concurrentConsumers]]&amp;timeout=[[seda.api.timeout]]" />

        <route id="seda-manager-rs-api">
            <from uri="sedaManagerAPI"/>
            <log message="ManagerRestService: '${headers.operationName}' is started, headers=${headers} | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO"/>
            <choice>
                <when>
                    <simple>${headers.operationName} in 'start,stop'</simple>
                    <inOnly uri="direct:managerSchedule"/>
                    <setBody><constant><![CDATA[<BaseResponse><Status>OK</Status></BaseResponse>]]></constant></setBody>
                </when>
                <when>
                    <simple>${headers.operationName} in 'hashGeneration'</simple>
                    <choice>
                        <when>
                            <simple>${headers.SyncFlag} == 'false'</simple>
                            <inOnly uri="direct:managerAsyncHashGeneration"/>
                        </when>
                        <when>
                            <simple>${headers.SyncFlag} == 'true'</simple>
                            <inOut uri="direct:managerSyncHashGeneration"/>
                        </when>
                    </choice>
                </when>
                <when>
                    <simple>${headers.operationName} in 'getHashes'</simple>
                    <to uri="direct:managerGetHashes"/>
                </when>
                <when>
                    <simple>${headers.operationName} == 'searchEvents'</simple>
                    <doTry>
                        <toD uri="[[service.address]]?throwExceptionOnFailure=false"/>
                        <filter>
                            <simple>${headers.Content-Type} not contains 'application/xml' or ${headers.CamelHttpResponseCode} >= 300</simple>
                            <log message="ManagerRestService: '${headers.operationName}' is finished with error, responseCode=${headers.CamelHttpResponseCode} | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="ERROR"/>
                            <setBody><simple><![CDATA[<BaseResponse><Status>ERROR</Status><Message>Response code is ${headers.CamelHttpResponseCode} and ${headers.Content-Type}</Message></BaseResponse>]]></simple></setBody>
                        </filter>
                        <doCatch>
                            <exception>java.io.IOException</exception>
                            <handled><constant>true</constant></handled>
                            <log message="ManagerRestService: '${headers.operationName}' throws exceptionMessage=${exception.message}, headers=${headers}" logName="[[logger.name]]" loggingLevel="ERROR"/>
                            <setBody><simple><![CDATA[<BaseResponse><Status>ERROR</Status><Message>${exception.message}</Message></BaseResponse>]]></simple></setBody>
                        </doCatch>
                    </doTry>
                    <convertBodyTo type="java.lang.String"/>
                </when>
                <otherwise>
                    <log message="ManagerRestService: '${headers.operationName}' is unsupported | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="ERROR"/>
                    <setBody><simple><![CDATA[<BaseResponse><Status>ERROR</Status><Message>'${headers.operationName}' is unsupported</Message></BaseResponse>]]></simple></setBody>
                </otherwise>
            </choice>
            <log message="ManagerRestService: '${headers.operationName}' is finished, headers=${headers}, body=${body} | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO"/>
            <removeHeaders pattern="*"/>
        </route>

        <route id="manager-schedule">
            <from uri="direct:managerSchedule"/>
            <log message="ManagerRestService: 'managerSchedule' is started | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO"/>
            <bean ref="managerScheduleService" method="doCall"/>
            <log message="ManagerRestService: 'managerSchedule' is finished | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO"/>
        </route>
        <route id="manager-sync-hash-generation">
            <from uri="direct:managerSyncHashGeneration"/>
            <log message="ManagerRestService: Sync 'eventHashGeneratorService' is started | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO"/>
            <bean ref="eventHashGeneratorService" method="doSyncCall"/>
            <setBody><simple><![CDATA[<BaseResponse><EventId>${headers.eventId}</EventId><Response>${body}</Response></BaseResponse>]]></simple></setBody>
            <log message="ManagerRestService: Sync 'eventHashGeneratorService' is finished | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO"/>
        </route>
        <route id="manager-async-hash-generation">
            <from uri="direct:managerAsyncHashGeneration"/>
            <log message="ManagerRestService: Async 'eventHashGeneratorService' is started | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO"/>
            <bean ref="eventHashGeneratorService" method="doAsyncCall"/>
            <setBody><constant><![CDATA[<BaseResponse><Status>Success</Status></BaseResponse>]]></constant></setBody>
            <log message="ManagerRestService: Async 'eventHashGeneratorService' is finished | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO"/>
        </route>
        <route id="manager-get-hashes">
            <from uri="direct:managerGetHashes"/>
            <log message="ManagerRestService: 'eventHashGeneratorService' is started | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO"/>
            <bean ref="eventHashGeneratorService" method="getHashes"/>
            <log message="ManagerRestService: 'eventHashGeneratorService' is finished | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO"/>
        </route>

    </camelContext>

</blueprint>