<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0"
           xmlns:jaxws="http://cxf.apache.org/blueprint/jaxws"
           xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
           xmlns:cxf="http://cxf.apache.org/blueprint/core"
           xmlns:camel="http://camel.apache.org/schema/blueprint"
           xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
           xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0"
           xmlns:functions="http://camel.apache.org/xml/function/"
           xsi:schemaLocation="
               http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
               http://cxf.apache.org/blueprint/jaxws http://cxf.apache.org/schemas/blueprint/jaxws.xsd
               http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd">

	<cm:property-placeholder id="schedule-rs-config" persistent-id="edu.servicemix.esb.services.schedule" update-strategy="reload">
        <cm:default-properties>
            <cm:property name="rs.address" value="/rest/schedule"/>
            <cm:property name="logger.name" value="edu.servicemix.esb.services.schedule"/>
            <cm:property name="seda.api.size" value="100"/>
            <cm:property name="seda.api.concurrentConsumers" value="100"/>
            <cm:property name="seda.api.timeout" value="600000"/>
            <cm:property name="schedule.queue.request" value="schedule.sys.in.queue"/>
        </cm:default-properties>
    </cm:property-placeholder>

	<bean id="scheduleRestService" class="edu.servicemix.esb.services.transformer.schedule.rest.ScheduleRestService">
		<property name="producerTemplate" ref="scheduleProducerTemplate" />
	</bean>
	
	<jaxrs:server id="schedule-rs" address="${rs.address}">
        <jaxrs:serviceBeans>
            <ref component-id="scheduleRestService"/>
        </jaxrs:serviceBeans>
    </jaxrs:server>
	

    <camelContext id="schedule-rs-context" xmlns="http://camel.apache.org/schema/blueprint">
    	<propertyPlaceholder id="schedule-rs-properties" location="blueprint:schedule-rs-config" prefixToken="[[" suffixToken="]]"/>
    
    	<template id="scheduleProducerTemplate"/>
   
    	<endpoint id="sedaScheduleAPI" uri="seda:sedaScheduleAPI?size=[[seda.api.size]]&amp;concurrentConsumers=[[seda.api.concurrentConsumers]]&amp;timeout=[[seda.api.timeout]]" />
   
   		<dataFormats>
		    <jaxb id="scheduleResponse-jaxb" prettyPrint="true" 
			    contextPath="edu.servicemix.esb.commons.schedule" 
			    partClass="edu.servicemix.esb.commons.schedule.ScheduleResponse"/>
	    </dataFormats>

		<onException>
            <exception>java.lang.Exception</exception>
            <redeliveryPolicy maximumRedeliveries="0" />
            <handled><constant>true</constant></handled>
            <to uri="direct:scheduleServiceErrorHandler"/>
        </onException>

   		<route id="seda-schedule-rs-api">
   			<from uri="sedaScheduleAPI" />
   			<choice>
   				<when>
   					<simple>${headers.operationName} == 'schedule'</simple>
   					<to uri="direct:operation-schedule" />
   				</when>
   				<when>
   					<simple>${headers.operationName} == 'GetEvents'</simple>
   					<to uri="direct:operation-GetEvents" />
   				</when>
   				<otherwise>
   					<log message="ScheduleRestService: '${headers.operationName}' operation is unsupported  | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="ERROR"/>
					<throwException exceptionType="java.lang.IllegalArgumentException" message="Unsupported opertaion type" />
   				</otherwise>
   			</choice>
   			
   			<filter>
   				<simple>${headers.EXCEPTION_MESSAGE}</simple>
   				<to uri="direct:scheduleServiceErrorHandler" />
   			</filter>
   			
   			<log message="ScheduleRestService: '${headers.operationName}' is successful completed | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO"/>
   		</route>
   
   		<route id="rs-operation-schedule">
   			<from uri="direct:operation-schedule" />
   			<setBody><constant><![CDATA[<dummy/>]]></constant></setBody>
   			<to uri="direct:sendToAmq" />
   		</route>
   		<route id="rs-operation-get-events">
   			<from uri="direct:operation-GetEvents" />
   			<setHeader headerName="userName"><xpath resultType="java.lang.String">//*[local-name()='user']</xpath></setHeader>
   			<setHeader headerName="fromDate"><xpath resultType="java.lang.String">//*[local-name()='from']</xpath></setHeader>
   			<to uri="direct:sendToAmq" />
   		</route>
   		
   
		<route id="amq-sender-schedule-rs">
			<from uri="direct:sendToAmq" />
			<log message="ScheduleRestService AMQ: '${headers.operationName}' sending message onto AMQ queue '[[schedule.queue.request]], body: ${body}, headers: ${headers} | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO" />
            <to uri="activemq:[[schedule.queue.request]]" />
            <log message="ScheduleRestService AMQ: '${headers.operationName}' receiving message from AMQ queue '[[schedule.queue.request]]', body: ${body}, headers: ${headers} | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="INFO" />
		</route>
   
        <route id="schedule-rs-error-handler">
        	<from uri="direct:scheduleServiceErrorHandler" />
        	<choice>
        		<when>
        			<simple>${headers.EXCEPTION_MESSAGE}</simple>
        			<log message="ScheduleRestService: '${headers.operationName}' headers already exists EXCEPTION_MESSAGE, headers: ${headers} | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="ERROR"/>
        		</when>
        		<when>
        			<simple>${exception.message} != null and ${exception.message} != ''</simple>
        			<setHeader headerName="EXCEPTION_MESSAGE"><simple>${exception.message}</simple></setHeader>
        		</when>
        		<otherwise>
        			<setHeader headerName="EXCEPTION_MESSAGE"><simple>Unknown error type</simple></setHeader>
        		</otherwise>
        	</choice>
			<setBody><constant><![CDATA[<dummy/>]]></constant></setBody>
 			<to uri="xslt:META-INF/xsl/Dummy2ScheduleErrorResponse.xsl?saxon=true" />
 			<log message="ScheduleRestService: '${headers.operationName}' failed with body:\n${body} | exid=${exchangeId}" logName="[[logger.name]]" loggingLevel="ERROR"/>
        </route>
    </camelContext>
</blueprint>